// Generated by CoffeeScript 1.3.3

/*
@author aleeper / http://adamleeper.com/
@author mrdoob / http://mrdoob.com/
@author jaekwon / http://kopimism.org/

Description: A THREE loader for STL files, as created by Solidworks and other CAD programs.
Limitations: The binary loader could be optimized for memory.
*/


(function() {
  var THREE, Triangle, parseAscii, parseBinary;

  THREE = require('three');

  Triangle = function() {
    var _attr;
    this._sa = 0;
    this._buffer = new ArrayBuffer(50);
    this.__byte = new Uint8Array(this._buffer);
    this.normal = new Float32Array(this._buffer, this._sa + 0, 3);
    this.v1 = new Float32Array(this._buffer, this._sa + 12, 3);
    this.v2 = new Float32Array(this._buffer, this._sa + 24, 3);
    this.v3 = new Float32Array(this._buffer, this._sa + 36, 3);
    _attr = new Int16Array(this._buffer, this._sa + 48, 1);
    return Object.defineProperty(this, "attr", {
      get: function() {
        return _attr[0];
      },
      set: function(val) {
        return _attr[0] = val;
      },
      enumerable: true
    });
  };

  this.parse = function(arrayBuffer) {
    var head, i, s, u8a, _i, _ref;
    u8a = new Uint8Array(arrayBuffer);
    head = String.fromCharCode.apply(null, new Uint8Array(arrayBuffer, 0, 5));
    if (head === 'solid') {
      s = '';
      for (i = _i = 0, _ref = arrayBuffer.byteLength; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        s += String.fromCharCode(u8a[i]);
      }
      return parseAscii(s);
    } else {
      return parseBinary(u8a);
    }
  };

  this.parseBinary = parseBinary = function(u8a) {
    var face, geometry, i, j, len, normal, numTriangles, offset, _i, _j;
    geometry = new THREE.Geometry();
    numTriangles = u8a[80] << 0;
    numTriangles += u8a[81] << 8;
    numTriangles += u8a[82] << 16;
    numTriangles += u8a[83] << 24;
    face = new Triangle();
    offset = 84;
    for (i = _i = 0; 0 <= numTriangles ? _i < numTriangles : _i > numTriangles; i = 0 <= numTriangles ? ++_i : --_i) {
      for (j = _j = 0; _j < 50; j = ++_j) {
        face.__byte[j] = u8a[offset + j];
      }
      geometry.vertices.push(new THREE.Vector3(face.v1[0], face.v1[1], face.v1[2]));
      geometry.vertices.push(new THREE.Vector3(face.v2[0], face.v2[1], face.v2[2]));
      geometry.vertices.push(new THREE.Vector3(face.v3[0], face.v3[1], face.v3[2]));
      normal = new THREE.Vector3(face.normal[0], face.normal[1], face.normal[2]);
      len = geometry.vertices.length;
      geometry.faces.push(new THREE.Face3(len - 3, len - 2, len - 1, normal));
      offset += 50;
    }
    geometry.computeCentroids();
    geometry.computeBoundingSphere();
    geometry.computeFaceNormals();
    geometry.computeVertexNormals();
    return geometry;
  };

  this.parseAscii = parseAscii = function(text) {
    var facetext, geometry, len, normal, patternFace, patternNormal, patternVertex, result;
    geometry = new THREE.Geometry();
    patternFace = /facet([\s\S]*?)endfacet/g;
    result = void 0;
    while ((result = patternFace.exec(text)) !== null) {
      facetext = result[0];
      patternNormal = /normal[\s]+([-+]?[0-9]+\.?[0-9]*([eE][-+]?[0-9]+)?)+[\s]+([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)+[\s]+([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)+/g;
      while ((result = patternNormal.exec(facetext)) !== null) {
        normal = new THREE.Vector3(Number(result[1]), Number(result[3]), Number(result[5]));
      }
      patternVertex = /vertex[\s]+([-+]?[0-9]+\.?[0-9]*([eE][-+]?[0-9]+)?)+[\s]+([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)+[\s]+([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)+/g;
      while ((result = patternVertex.exec(facetext)) !== null) {
        geometry.vertices.push(new THREE.Vector3(Number(result[1]), Number(result[3]), Number(result[5])));
      }
      len = geometry.vertices.length;
      geometry.faces.push(new THREE.Face3(len - 3, len - 2, len - 1, normal));
    }
    geometry.computeCentroids();
    geometry.computeBoundingSphere();
    geometry.computeFaceNormals();
    geometry.computeVertexNormals();
    return geometry;
  };

}).call(this);
